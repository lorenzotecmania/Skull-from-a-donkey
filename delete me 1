import pygame
import random

pygame.init()

# Constants
DIFFICULTY = 2
GRID_SIZE = 3+DIFFICULTY*2

# Set up fullscreen mode and get screen resolution
screen_info = pygame.display.Info()
SCREEN_W, SCREEN_H = screen_info.current_w, screen_info.current_h
screen = pygame.display.set_mode((SCREEN_W, SCREEN_H), pygame.FULLSCREEN)

# Set up text display
font = pygame.font.Font(None, 48)
text_surface = font.render("YOU WON!", True, (255, 255, 255))

# Calculate box size based on screen size
BOX_SIZE = min(SCREEN_W, SCREEN_H) // (GRID_SIZE + 1)
BOX_SPACE = BOX_SIZE - 6
BORDER_OFFSET = (min(SCREEN_W, SCREEN_H) - GRID_SIZE * BOX_SIZE) // 2

# Create boxes (grid)
boxes = []
for i in range(GRID_SIZE):  # Outer loop
    for j in range(GRID_SIZE):  # Inner loop
        boxX = i * BOX_SIZE + BORDER_OFFSET + (SCREEN_W - min(SCREEN_W, SCREEN_H)) // 2
        boxY = j * BOX_SIZE + BORDER_OFFSET + (SCREEN_H - min(SCREEN_W, SCREEN_H)) // 2
        box = pygame.Rect(boxX, boxY, BOX_SIZE, BOX_SIZE)
        boxes.append(box)

# Receiver (spawn in the center square of the grid)
center_index = GRID_SIZE**2 // 2
center_box = boxes[center_index]
receiver = pygame.Rect(center_box.left + 3, center_box.top + 3, BOX_SPACE, BOX_SPACE)

# Player
available_boxes = [box for box in boxes if box != center_box]
player_box = random.choice(available_boxes)
player = pygame.Rect(player_box.left + 3, player_box.top + 3, BOX_SPACE, BOX_SPACE)

player_sprite = pygame.image.load('player_sprite.png')
player_sprite = pygame.transform.scale(player_sprite, (BOX_SPACE, BOX_SPACE))
player_sprite_selected = pygame.image.load('player_sprite_selected.png')
player_sprite_selected = pygame.transform.scale(player_sprite_selected, (BOX_SPACE, BOX_SPACE))

crate_sprite = pygame.image.load('crate_sprite.png')
crate_sprite = pygame.transform.scale(crate_sprite, (BOX_SPACE, BOX_SPACE))
crate_sprite_selected = pygame.image.load('player_sprite_selected.png')
crate_sprite_selected = pygame.transform.scale(player_sprite_selected, (BOX_SPACE, BOX_SPACE))

# Crates
available_boxes = [box for box in boxes if box != center_box and box != player_box]
h1 = int(1.5*2**DIFFICULTY)
crates = []
for h in range(h1):

    crate_box = random.choice(available_boxes)
    crate = pygame.Rect(crate_box.left + 3, crate_box.top + 3, BOX_SPACE, BOX_SPACE)
    crates.append(crate)
    available_boxes.remove(crate_box)

# Blockers
available_boxes = [box for box in boxes if box != center_box and box != player_box and box != crates]
blockers = []
for h in range(2):
    blocker_box = random.choice(available_boxes)
    blocker = pygame.Rect(blocker_box.left + 3, blocker_box.top + 3, BOX_SPACE, BOX_SPACE)
    blockers.append(blocker)
    available_boxes.remove(blocker_box)

# Border
border = pygame.Rect(
    BORDER_OFFSET + (SCREEN_W - min(SCREEN_W, SCREEN_H)) // 2,
    BORDER_OFFSET + (SCREEN_H - min(SCREEN_W, SCREEN_H)) // 2,
    GRID_SIZE * BOX_SIZE, GRID_SIZE * BOX_SIZE
)
border.inflate_ip(6,6)

player_selected = False
crate_selected = None
run = True

def is_within_3x3_area(player_rect, crate_rect):
    # Check if crate is within a 3x3 area around the player
    return abs(player_rect.centerx - crate_rect.centerx) <= BOX_SIZE and \
           abs(player_rect.centery - crate_rect.centery) <= BOX_SIZE

# Event handler
while run:
    screen.fill((0, 0, 0))

    # Draw elements
    pygame.draw.rect(screen, (0, 0, 250), receiver)


    for crate in crates:
        pygame.draw.rect(screen, (50, 150, 90), crate)

    #for blocker in blockers:
        #pygame.draw.rect(screen, (30, 30, 30), blocker)

    for box in boxes:
        pygame.draw.rect(screen, "green", box, 3)

    pygame.draw.rect(screen, (0, 250, 0), border, 6)

    if player_selected:
        screen.blit(player_sprite_selected, (player.x, player.y))
    else:
        screen.blit(player_sprite, (player.x, player.y))

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            run = False

        if event.type == pygame.MOUSEBUTTONDOWN:

            # Check if any crate within the 3x3 area is clicked
            crate_clicked = False
            for crate in crates:
                if crate.collidepoint(event.pos) and is_within_3x3_area(player, crate):
                    crate_selected = crate
                    crate_clicked = True  # Mark that a crate was clicked

            # If no crate was clicked, check for movement
            if crate_selected and not crate_clicked and border.collidepoint(event.pos):
                for box in boxes:
                    if box.collidepoint(event.pos):
                        if not is_within_3x3_area(player, box):
                            break
                        if receiver.colliderect(box):
                            break
                        if player.colliderect(box):
                            break
                        crate_selected.center = box.center
                        break
                crate_selected = None

            # Handle player movement
            if player.collidepoint(event.pos):
                player_selected = not player_selected

            elif player_selected and border.collidepoint(event.pos):
                for box in boxes:       
                    if box.collidepoint(event.pos):
                        if receiver.colliderect(box):
                            break
                        if any(crate.colliderect(box) for crate in crates):
                            break
                        player.center = box.center
                        break
                player_selected = False
    if not crates:
        screen.blit(text_surface, (100, 100))

    pygame.display.update()

pygame.quit()
